import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  Index,
  ManyToOne,
  OneToOne,
  JoinColumn,
  PrimaryColumn,
} from 'typeorm';
import {Player} from './player';
import {Club} from './club';
import {PokerGame} from './game';
import {DbAwareColumn, DbAwareUpdateDateColumn} from './dbaware';
import {BuyInApprovalStatus, PlayerStatus} from './types';

@Entity({name: 'player_game_tracker'})
export class PlayerGameTracker {
  // NOTE:
  // SOMA: I added pgt_ prefix to avoid an ambigous column reference caused by the SQL generated by typeorm
  // "PlayerGameTracker"."player_id" AS "PlayerGameTracker_player_id",
  // "PlayerGameTracker_player"."id" AS "PlayerGameTracker_player_id"
  @Index('player-game-tracker-player-idx')
  @ManyToOne(() => Player, player => player.id, {primary: true, eager: true})
  @JoinColumn({name: 'pgt_player_id'})
  public player!: Player;

  @Index('player-game-tracker-club-idx')
  @ManyToOne(() => Club, club => club.id)
  @JoinColumn({name: 'pgt_club_id'})
  public club!: Club;

  @Index('player-game-tracker-game-idx')
  @ManyToOne(() => PokerGame, game => game.id, {primary: true})
  @JoinColumn({name: 'pgt_game_id'})
  public game!: PokerGame;

  @Column({name: 'buy_in', type: 'decimal'})
  public buyIn!: number;

  @Column({name: 'stack', type: 'decimal'})
  public stack!: number;

  @Column({name: 'status', nullable: false, type: 'int'})
  public status!: PlayerStatus;

  @Column({name: 'buyIn_status', nullable: true, type: 'int'})
  public buyInStatus!: BuyInApprovalStatus;

  @Column({name: 'buyin_notes', type: 'text', nullable: true})
  public buyinNotes!: string;

  @Column({name: 'game_token', type: 'text', nullable: false, default: ''})
  public gameToken!: string;

  @Column({name: 'seat_no', nullable: true})
  public seatNo!: number;

  @Column({name: 'queue_no', nullable: false, default: 0})
  public queueNo!: number;

  @Column({name: 'no_of_buyins', default: 0})
  public noOfBuyins!: number;

  @Column({name: 'hh_rank', nullable: true})
  public hhRank!: number;

  @Column({name: 'hh_hand_num', nullable: true})
  public hhHandNum!: number;

  @Column({name: 'session_time', default: 0})
  public sessionTime!: number;

  @DbAwareColumn({
    name: 'seat_change_requested_at',
    type: 'timestamp',
    nullable: true,
    default: null,
  })
  public seatChangeRequestedAt!: Date | null;

  @Column({name: 'seat_change_confirmed', default: false})
  public seatChangeConfirmed!: boolean;

  @DbAwareColumn({
    name: 'sat_at',
    type: 'timestamp',
    nullable: true,
  })
  public satAt!: Date;

  @DbAwareColumn({
    name: 'break_time_at',
    type: 'timestamp',
    nullable: true,
    default: null,
  })
  public breakTimeAt!: Date;

  @DbAwareColumn({
    name: 'waiting_from',
    type: 'timestamp',
    nullable: true,
  })
  public waitingFrom!: Date | null;

  // this user is notified to take a seat and the time will expire at this time
  @DbAwareColumn({
    name: 'waitlist_sitting_exp',
    type: 'timestamp',
    nullable: true,
  })
  public waitingListTimeExp!: Date | null;
}

@Entity({name: 'club_game_rake'})
export class ClubGameRake {
  @ManyToOne(() => Club, club => club.id, {nullable: true})
  @JoinColumn({name: 'club_id'})
  public club!: Club;

  @ManyToOne(() => PokerGame, game => game.id, {primary: true})
  @JoinColumn({name: 'game_id'})
  public game!: PokerGame;

  @Column({name: 'rake', type: 'decimal', precision: 8, scale: 2, default: 0.0})
  public rake!: number;

  @Column({type: 'decimal', name: 'promotion'})
  public promotion!: number;

  @Column({name: 'last_hand_num', nullable: false})
  public lastHandNum!: number;
}

@Entity({name: 'club_chips_transaction'})
export class ClubChipsTransaction {
  @PrimaryGeneratedColumn()
  public id!: number;

  @ManyToOne(type => Club)
  @JoinColumn({name: 'club_id'})
  public club!: Club;

  @Column({name: 'description', type: 'text'})
  public description!: string;

  @Column({name: 'amount', type: 'decimal', precision: 8, scale: 2})
  public amount!: number;

  @Column({name: 'balance', type: 'decimal', precision: 8, scale: 2})
  public balance!: number;

  @DbAwareUpdateDateColumn({
    name: 'updated_at',
    type: 'timestamp',
    default: () => 'CURRENT_TIMESTAMP',
    onUpdate: 'CURRENT_TIMESTAMP',
  })
  public updatedAt!: Date;
}
