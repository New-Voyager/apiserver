input PlayerCreateInput {
  name: String!
  email: String
  password: String
  deviceId: String
  isBot: Boolean
}

input PlayerUpdateInput {
  name: String
  email: String
  displayName: String
}

type Player {
  name: String!
  playerId: String!
  email: String
  lastActiveTime: DateTime
  clubs: [PlayerClub!]
}

type PlayerClub {
  name: String
  host: String
  clubCode: String
  clubStatus: ClubStatus
  picUrl: String
  memberCount: Int
  imageId: String
  isOwner: Boolean
  private: Boolean
  memberStatus: ClubMemberStatus
  availableCredit: Float
  pendingMemberCount: Int
  unreadMessageCount: Int
  memberUnreadMessageCount: Int
  hostUnreadMessageCount: Int
  liveGameCount: Int
}

type LiveGame {
  clubCode: String
  clubName: String
  gameCode: String!
  title: String
  gameType: GameType!
  buyInMin: Float
  buyInMax: Float
  smallBlind: Float
  bigBlind: Float
  elapsedTime: Int!
  startedAt: DateTime!
  status: GameStatus!
  isTableFull: Boolean!
  maxPlayers: Int!
  waitlistCount: Int! # number of players in waiting list
  tableCount: Int! # number of players playing
  playerStatus: PlayerGameStatus!
  handsDealt: Int!
  highHands: [HighHand!]
  highHandWinners: [HighHand!]
  clubPicUrl: String
}

type PastGame {
  clubCode: String
  clubName: String
  gameCode: String!
  title: String
  gameType: GameType!
  smallBlind: Float!
  bigBlind: Float!
  sessionTime: Int!
  startedBy: String
  startedAt: DateTime!
  endedAt: DateTime!
  endedBy: String
  runTime: Int!
  buyIn: Float
  stack: Float
  balance: Float
  handsDealt: Int!
  handsPlayed: Int
  highHands: [HighHand!]
  highHandWinners: [HighHand!]
  clubPicUrl: String
}

type PlayerId {
  uuid: String!
  id: Int!
  name: String!
  lastActiveTime: DateTime
}

type PlayerInfo {
  uuid: String!
  id: Int!
  name: String!
  email: String
  lastActiveTime: DateTime
  channel: String
  privileges: Privileges
}

type Privileges {
  clubOwner: Boolean
  clubManager: Boolean
  gameHost: Boolean
}

type ManagerRole {
  approveMembers: Boolean
  seeTips: Boolean
  makeAnnouncement: Boolean
  sendPrivateMessage: Boolean
  hostGames: Boolean
  approveBuyin: Boolean
  viewMemberActivities: Boolean
  canUpdateCredits: Boolean
}

type ClubInfo {
  name: String! # name of the club
  myBalance: Float!
  description: String
  picUrl: String
  joinedAt: DateTime
  status: ClubMemberStatus
  gamesPlayed: Int
  isManager: Boolean
  isOwner: Boolean
  pendingMemberCount: Int
  unreadMessageCount: Int
  memberUnreadMessageCount: Int
  hostUnreadMessageCount: Int
  liveGameCount: Int
  showHighRankStats: Boolean
  trackMemberCredit: Boolean
  availableCredit: Float
  managerRole: ManagerRole
}

type SearchClubResult {
  name: String! # name of the club
  ownerName: String!
  status: ClubStatus
}

enum StoreType {
  UNKNOWN
  IOS_APP_STORE
  GOOGLE_PLAY_STORE
  STRIPE_PAYMENT
}

type IapReceipt {
  valid: Boolean!
  duplicate: Boolean
}

enum RedeemPromotionError {
  PROMOTION_INVALID
  PROMOTION_CONSUMED
  PROMOTION_EXPIRED
  PROMOTION_MAX_LIMIT_REACHED
  PROMOTION_UNAUTHORIZED
}

type RedeemPromotionResult {
  success: Boolean!
  availableCoins:Int!
  error: RedeemPromotionError
}

type PlayerNotes {
  playerId: Int!
  playerUuid: String!
  notes: String!
}

type Query {
  myClubs: [PlayerClub!]
  allPlayers: [Player!]
  playerById: PlayerId!
  encryptionKey: String!
  liveGames(clubCode: String): [LiveGame!]
  pastGames: [PastGame!]
  myInfo(getPrivs: Boolean): PlayerInfo!
  clubInfo(clubCode: String!): ClubInfo!
  searchClub(clubCode: String!): SearchClubResult
  liveAudioToken(gameCode: String!): String!
  idsToPlayersInfo(ids: [Int!]): [PlayerInfo]
  availableAppCoins: Int!
  notes(playerId: String, playerUuid: String): String
  notesForPlayers(playerIds: [Int!]): [PlayerNotes!]
}

type Mutation {
  createPlayer(player: PlayerCreateInput!): String!
  authenticatePlayer(name: String!, uuid: String!, deviceId: String!): Boolean
  leaveClub(clubCode: String!): ClubMemberStatus
  updateFirebaseToken(token: String!): Boolean
  appCoinPurchase(
    storeType: StoreType!
    coinsPurchased: Int
    receipt: String!
  ): IapReceipt!
  buyDiamonds(coinsUsed: Int!, diamonds: Int!): Boolean
  setNotes(playerId: String, playerUuid: String, notes: String): Boolean
  sendPlayerFcmMessage(message: Json!): Boolean
  changeDisplayName(name: String!): Boolean
  updatePlayer(input: PlayerUpdateInput!): Boolean
  redeemPromotionCode(code: String!): RedeemPromotionResult!
  updateLocation(location: LocationInput!): Boolean!
  ipChanged: Boolean
}
