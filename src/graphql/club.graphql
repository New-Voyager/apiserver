scalar DateTime
enum ClubMemberStatus {
  UNKNOWN
  INVITED
  PENDING
  DENIED
  ACTIVE
  LEFT
  KICKEDOUT
}

enum ClubStatus {
  UNKOWN
  ACTIVE
  DEFUNCT
}

input ClubCreateInput {
  name: String!
  description: String!
}

input ClubUpdateInput {
  name: String
  description: String
}

input ClubMemberUpdateInput {
  isManager: Boolean
  notes: String
  balance: Float
  status: ClubMemberStatus
  creditLimit: Float
  autoBuyinApproval: Boolean
  referredBy: String
  contactInfo: String
}


type ClubMember {
  name: String!
  playerId: String!
  joinedDate: DateTime!
  status: ClubMemberStatus!
  lastPlayedDate: DateTime
  imageId: String
  isOwner: Boolean
  isManager: Boolean
  playerId: String
  balance: Float
  totalBuyins: Int
  totalWinnings: Int
  rakePaid: Float
  notes: String
  contactInfo: String
  referredBy: String
  autoBuyinApproval: Boolean
  creditLimit: Float
  totalGames: Int
}

type ClubGameInfo {
  title: String
  gameType: GameType
  pageId: Int!
  gameCode: String!
  gameNum: Int
  smallBlind: Float
  bigBlind: Float
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  status: GameStatus
  runTime: Int
  runTimeStr: String
  sessionTime: Int
  sessionTimeStr: String
  handsPlayed: Int
  balance: Int  
}

input PageInput {
  prev: Int
  next: Int
  count: Int
}

type clubId{
  id: Int!
}

input MemberFilterInput {
  all: Boolean              # added this to make it easy to build queries in the client
  inactive: Boolean
  unsettled: Boolean
  managers: Boolean
  playerId: String
}

type Query {
  clubMembers(clubCode: String!, filter: MemberFilterInput): [ClubMember!]
  clubById(clubCode: String!): clubId!
  # returns 'last' number of games 'from' in reverse order
  # by default, this call returns only last 20 games
  # the caller can paginate with pageId
  # clubGames(clubCode: "", prev: 20, from: 10000001)
  clubGames(clubCode: String!, page: PageInput, completedGames: Boolean): [ClubGameInfo!]
}

type Mutation {
  createClub(club: ClubCreateInput!): String!
  updateClub(clubCode: String!, club: ClubUpdateInput!): Boolean!
  joinClub(clubCode: String!): ClubMemberStatus
  approveMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  rejectMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  kickMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  deleteClub(clubCode: String!): Boolean!
  updateClubMember(clubCode: String!, playerUuid: String!, update: ClubMemberUpdateInput!): ClubMemberStatus
}
