scalar DateTime
enum ClubMemberStatus {
  UNKNOWN
  INVITED
  PENDING
  DENIED
  ACTIVE
  LEFT
  KICKEDOUT
}

enum ClubStatus {
  UNKOWN
  ACTIVE
  DEFUNCT
}

enum CreditUpdateType {
  CHANGE
  BUYIN
  GAME_RESULT
  ADD
  DEDUCT
}

input ClubCreateInput {
  name: String!
  description: String!
  invitationCode: String
}

input ClubUpdateInput {
  name: String
  description: String
  showHighRankStats: Boolean
  trackMemberCredit: Boolean
  picUrl: String
  showGameResult: Boolean
}

input ClubMemberUpdateInput {
  isManager: Boolean
  notes: String
  status: ClubMemberStatus
  autoBuyinApproval: Boolean
  leaderUuid: String            # playerUuid 
  contactInfo: String
  tipsBack: Float
  isOwner: Boolean
  isLeader: Boolean
}

input ManagerRoleInput {
  approveMembers: Boolean
  seeTips: Boolean
  makeAnnouncement: Boolean
  sendPrivateMessage: Boolean
  hostGames: Boolean
  approveBuyin: Boolean
  viewMemberActivities: Boolean
  canUpdateCredits: Boolean
}
  
type ClubMember {
  name: String!
  memberId: Int!
  playerId: String!
  playerUuid: String!
  externalId: String!
  joinedDate: DateTime!
  status: ClubMemberStatus!
  lastPlayedDate: DateTime
  imageId: String
  isOwner: Boolean
  isManager: Boolean
  isMainOwner: Boolean
  isLeader: Boolean
  totalBuyins: Float
  totalWinnings: Float
  rakePaid: Float
  notes: String
  contactInfo: String
  referredBy: String
  autoBuyinApproval: Boolean
  totalGames: Int
  availableCredit: Float
  updatedAt: DateTime
  tipsBack: Float
  followup: Boolean
  leaderName: String
  leaderUuid: String
}

type ClubGameInfo {
  title: String
  gameType: GameType
  pageId: Int!
  gameCode: String!
  gameNum: Int
  smallBlind: Float
  bigBlind: Float
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  status: GameStatus
  runTime: Int
  runTimeStr: String
  sessionTime: Int
  sessionTimeStr: String
  handsPlayed: Int
  balance: Float  
}

input PageInput {
  prev: Int
  next: Int
  count: Int
}

type clubId{
  id: Int!
}

input MemberFilterInput {
  all: Boolean              # added this to make it easy to build queries in the client
  inactive: Boolean
  unsettled: Boolean
  negative: Boolean
  positive: Boolean
  managers: Boolean
  playerId: String
  inactiveFrom: DateTime
}

type ClubMemberStat {
  playerName: String!
  playerId: Int!
  playerUuid: String!
  gamesPlayed: Int!
  handsPlayed: Int!
  buyin: Float!
  profit: Float!
  rakePaid: Float! 
}

type CreditHistory {
  transId: Int!
  updateType: CreditUpdateType!
  amount: Float!
  updatedCredits: Float!
  tips: Float
  gameCode: String
  adminName: String
  notes: String
  updateDate: DateTime
  followup: Boolean
}

type ClubMemberActivityGrouped {
  playerName: String!
  playerId: Int!
  playerUuid: String!
  availableCredit: Float!
  tips: Float!
  tipsBack: Float!
  tipsBackAmount: Float!
  lastPlayedDate: DateTime
  buyIn: Float!
  profit: Float!
  gamesPlayed: Int!
  followup: Boolean
}

type ClubInvitation {
  code: String!
  used: Boolean!
  valid: Boolean!
}

type Query {
  clubMembers(clubCode: String!, filter: MemberFilterInput): [ClubMember!]
  clubById(clubCode: String!): clubId!
  # returns 'last' number of games 'from' in reverse order
  # by default, this call returns only last 20 games
  # the caller can paginate with pageId
  # clubGames(clubCode: "", prev: 20, from: 10000001)
  clubGames(clubCode: String!, page: PageInput, completedGames: Boolean): [ClubGameInfo!]
  clubLeaderBoard(clubCode: String!): [ClubMemberStat]
  clubCoins(clubCode: String!): Int!
  creditHistory(clubCode: String!, playerUuid: String!): [CreditHistory!]
  # Dates are in UTC.
  clubMemberActivityGrouped(clubCode: String!, startDate: DateTime!, endDate: DateTime!): [ClubMemberActivityGrouped]
}

type Mutation {
  createClub(club: ClubCreateInput!): String!
  updateClub(clubCode: String!, club: ClubUpdateInput!): Boolean!
  joinClub(clubCode: String!): ClubMemberStatus
  approveMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  rejectMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  kickMember(clubCode: String!, playerUuid: String!): ClubMemberStatus
  deleteClub(clubCode: String!): Boolean!
  updateClubMember(clubCode: String!, playerUuid: String!, update: ClubMemberUpdateInput!): ClubMemberStatus
  sendClubFcmMessage(clubCode: String!, message: Json!): Boolean
  updateManagerRole(clubCode: String!, role: ManagerRoleInput!): Boolean
  checkInvitation(code: String!): ClubInvitation!

  # credit tracking APIs
  setCredit(clubCode: String!, playerUuid: String!, amount: Float!, notes: String, followup: Boolean): Boolean!
  addCredit(clubCode: String!, playerUuid: String!, amount: Float!, notes: String, followup: Boolean): Boolean!
  deductCredit(clubCode: String!, playerUuid: String!, amount: Float!, notes: String, followup: Boolean): Boolean!
  clearFollowup(clubCode: String!, playerUuid: String!, transId: Int!): Boolean
  clearAllFollowups(clubCode: String!, playerUuid: String!): Boolean
}
