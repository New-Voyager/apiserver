scalar Json

enum GameType {
  UNKNOWN
  HOLDEM
  PLO
  PLO_HILO
  FIVE_CARD_PLO
  FIVE_CARD_PLO_HILO
  ROE
  DEALER_CHOICE
}


# Game status track the host actions on a game
# This information is updated by the host/manager
enum GameStatus {
  UNKNOWN
  CONFIGURED
  ACTIVE
  PAUSED
  ENDED
}

# Table status track the current status of the table
# This information is updated from the game server
enum TableStatus {
  UNKNOWN
  WAITING_TO_BE_STARTED
  NOT_ENOUGH_PLAYERS
  GAME_RUNNING
  HOST_SEATCHANGE_IN_PROGRESS
}

enum PlayerGameStatus {
  PLAYER_UNKNOWN_STATUS
  NOT_PLAYING
  PLAYING
  IN_QUEUE
  IN_BREAK
  STANDING_UP
  LEFT
  KICKED_OUT
  BLOCKED
  LOST_CONNECTION
  WAIT_FOR_BUYIN
  LEAVING_GAME
  TAKING_BREAK
  JOINING
  WAITLIST_SEATING
  PENDING_UPDATES
  WAIT_FOR_BUYIN_APPROVAL
  NEED_TO_POST_BLIND
}

enum BuyInApprovalStatus {
  WAITING_FOR_APPROVAL
  APPROVED
  DENIED
}

enum NextHandUpdate {
  UNKNOWN,
  SWITCH_SEAT,
  TAKE_BREAK,
  RELOAD_CHIPS,
  BACK_FROM_BREAK,
  LEAVE
}

enum SeatStatus {
  UNKNOWN,
  OPEN,
  OCCUPIED,
  RESERVED,
}

enum ChipUnit {
  DOLLAR,
  CENT,
}

input GameCreateInput {
  gameType: GameType!
  title: String
  smallBlind: Float!
  bigBlind: Float!
  ante: Float
  mandatoryStraddle: Boolean
  straddleBet: Float
  utgStraddleAllowed: Boolean
  buttonStraddleAllowed: Boolean
  buttonStraddleBet: Int
  chipUnit: ChipUnit
  minPlayers: Int! # 2
  maxPlayers: Int! # 2-9
  gameLength: Int! # in minutes
  buyInApproval: Boolean
  autoKickAfterBreak: Boolean
  sitInApproval: Boolean
  highHandTracked: Boolean
  maxWaitList: Int
  rakePercentage: Float
  rakeCap: Float
  buyInMin: Float!
  buyInMax: Float!
  actionTime: Int! # default 20 secs
  muckLosingHand: Boolean
  waitForBigBlind: Boolean
  rewardIds: [Int]
  pauseAfterShowdown: Int   # default 2 seconds
  buyInTimeout: Int         # default 60 seconds
  botGame: Boolean
  botsToWaitlist: Boolean
  showHandRank: Boolean
  appCoinsNeeded: Boolean
  doubleBoardEveryHand: Boolean
  showResult: Boolean
  dealerChoiceOrbit: Boolean

  # coming from game updates (can be changed)
  bombPotEnabled: Boolean
  bombPotBet: Int
  doubleBoardBombPot: Boolean
  bombPotInterval: Int        
  bombPotIntervalInSecs: Int  # for tests
  bombPotEveryHand: Boolean

  ipCheck: Boolean
  gpsCheck: Boolean

  useAgora: Boolean
  audioConfEnabled: Boolean

  allowRabbitHunt: Boolean
  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]
  runItTwiceAllowed: Boolean
  seatChangeAllowed: Boolean
  seatChangeTimeout: Int    # default 10 seconds
  waitlistAllowed: Boolean
  waitlistSittingTimeout: Int

  breakAllowed: Boolean
  breakLength: Int # in minutes (default 15 mins)
}

type SeatInfo {
  seatNo: Int!
  playerUuid: String
  playerId: Int
  name: String
  buyIn: Float
  stack: Float
  missedBlind: Boolean
  status: PlayerGameStatus
  seatStatus: SeatStatus
  buyInExpTime: DateTime
  breakStartedTime: DateTime
  breakExpTime: DateTime
  gameToken: String
  agoraToken: String
  isBot: Boolean
  settings: GamePlayerSettings
}

type TableSeats {
  playersInSeats: [SeatInfo!]
  seats: [SeatInfo!]
  availableSeats: [Int!]
}

type GamePlayer {
  id: Int!
  uuid: String!
  name: String!
}

type GameInfo {
  gameID: Int
  gameCode: String!
  clubCode: String
  gameType: GameType
  title: String
  smallBlind: Float
  bigBlind: Float
  straddleBet: Float
  ante: Float
  mandatoryStraddle: Boolean
  utgStraddleAllowed: Boolean
  buttonStraddleAllowed: Boolean
  buttonStraddleBet: Int
  chipUnit: ChipUnit
  minPlayers: Int
  maxPlayers: Int
  gameLength: Int
  buyInApproval: Boolean
  breakAllowed: Boolean
  waitlistAllowed: Boolean
  breakLength: Int
  autoKickAfterBreak: Boolean
  sitInApproval: Boolean
  highHandTracked: Boolean
  maxWaitList: Int
  rakePercentage: Float
  rakeCap: Float
  buyInMin: Float
  buyInMax: Float
  actionTime: Int
  muckLosingHand: Boolean         # default game setting
  waitForBigBlind: Boolean
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  template: Boolean
  status: GameStatus
  tableStatus: TableStatus
  seatInfo: TableSeats
  gameToken: String
  waitlistSittingTimeout: Int
  hhEligible: Boolean           # true if this game is eligible for high hand
  botGame: Boolean
  botsToWaitlist: Boolean
  runItTwiceAllowed: Boolean
  allowRabbitHunt: Boolean
  showHandRank: Boolean
  doubleBoardEveryHand: Boolean
  dealerChoiceOrbit: Boolean

  # bomb pot (comes from PokerGameUpdates)
  bombPotEnabled: Boolean
  bombPotBet: Int
  doubleBoardBombPot: Boolean
  bombPotInterval: Int        
  bombPotIntervalInSecs: Int 
  bombPotEveryHand: Boolean
  
  ipCheck: Boolean
  gpsCheck: Boolean

  showResult: Boolean

  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]
  runningTime: Int

  # NATS channels
  gameToPlayerChannel: String
  handToAllChannel: String
  playerToHandChannel: String
  handToPlayerChannel: String
  handToPlayerTextChannel: String
  gameChatChannel: String
  clientAliveChannel: String

  # current player status
  playerGameStatus: PlayerGameStatus
  playerRunItTwiceConfig: Boolean
  playerMuckLosingHandConfig: Boolean
  sessionTime: Int
  noHandsPlayed: Int
  noHandsWon: Int

  # updates
  handNum: Int
  rakeCollected: Float
    
  # player role
  isHost: Boolean
  isOwner: Boolean
  isManager: Boolean

  # all players in the game
  allPlayers: [GamePlayer!]
  
  # audio conference options
  audioConfEnabled: Boolean
  janusUrl: String
  janusToken: String
  janusSecret: String
  janusRoomId: Int
  janusRoomPin: String

  # agora token
  useAgora: Boolean
  agoraToken: String
  agoraAppId: String

  settings: GameSettings
}

type GamePlayerSettings {
  autoStraddle: Boolean
  straddle: Boolean
  buttonStraddle: Boolean
  buttonStraddleBet: Int
  bombPotEnabled: Boolean
  muckLosingHand: Boolean
  runItTwiceEnabled: Boolean
}

input GamePlayerSettingsUpdateInput {
  autoStraddle: Boolean
  straddle: Boolean
  buttonStraddle: Boolean
  buttonStraddleBet: Int
  bombPotEnabled: Boolean
  muckLosingHand: Boolean
  runItTwiceEnabled: Boolean
}

type GameSettings {
  resultPauseTime: Int
    
  buyInApproval: Boolean
  runItTwiceAllowed: Boolean
  funAnimations: Boolean
  chat: Boolean
  allowRabbitHunt: Boolean
  showHandRank: Boolean
  doubleBoardEveryHand: Boolean
  audioConfEnabled: Boolean

  # bomb pot (comes from PokerGameUpdates)
  bombPotEnabled: Boolean
  bombPotBet: Int
  doubleBoardBombPot: Boolean
  bombPotInterval: Int        
  bombPotIntervalInSecs: Int 
  bombPotEveryHand: Boolean

  seatChangeAllowed: Boolean
  seatChangeTimeout: Int    # default 10 seconds
  waitlistAllowed: Boolean
  waitlistSittingTimeout: Int

  breakAllowed: Boolean
  breakLength: Int # in minutes (default 15 mins)

  ipCheck: Boolean
  gpsCheck: Boolean

  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]
  showResult: Boolean
  dealerChoiceOrbit: Boolean
}

input GameSettingsUpdateInput {
  audioConfEnabled: Boolean
  resultPauseTime: Int

  buyInApproval: Boolean
  runItTwiceAllowed: Boolean
  allowRabbitHunt: Boolean
  showHandRank: Boolean
  doubleBoardEveryHand: Boolean
  funAnimations: Boolean
  chat: Boolean

  # bomb pot (comes from PokerGameUpdates)
  bombPotEnabled: Boolean
  bombPotBet: Int
  doubleBoardBombPot: Boolean
  bombPotInterval: Int        
  bombPotIntervalInSecs: Int 
  bombPotEveryHand: Boolean
  bombPotNextHand: Boolean

  seatChangeAllowed: Boolean
  seatChangeTimeout: Int    # default 10 seconds
  waitlistAllowed: Boolean
  waitlistSittingTimeout: Int

  breakAllowed: Boolean
  breakLength: Int # in minutes (default 15 mins)

  ipCheck: Boolean
  gpsCheck: Boolean

  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]

  showResult: Boolean
  dealerChoiceOrbit: Boolean
}

input GameConfigUpdateInput {
  # coming from game updates (can be changed)
  autoStraddle: Boolean
  straddleOption: Boolean
  participateBombPot: Boolean
  muckLosingHand: Boolean
}

type PlayerRole {
    # player role
  isHost: Boolean
  isOwner: Boolean
  isManager: Boolean
}

type PlayerGameState {
  playerUuid: String
  buyIn: Float
  stack: Float
  status: PlayerGameStatus
  buyInStatus: BuyInApprovalStatus
  playingFrom: DateTime
  waitlistNo: Int
  seatNo: Int
}

type PlayerSeatChange {
  playerUuid: String!
  name: String
  status: PlayerGameStatus
  seatNo: Int
  sessionTime: Int
  seatChangeRequestedAt: DateTime
}

type WaitingListPlayer {
  playerUuid: String
  name: String
  waitingFrom: DateTime
  status: PlayerGameStatus
  waitlistNum: Int
}

type BuyInStatus {
  expireSeconds: Int
  approved: Boolean!
}

enum ApprovalType {
  BUYIN_REQUEST
  RELOAD_REQUEST
}

enum ApprovalStatus {
  APPROVED
  DENIED
}

type PendingApproval {
  requestId: Int!
  gameCode: String!
  gameType: GameType
  clubCode: String
  playerUuid: String!
  name: String!
  approvalType: ApprovalType!
  amount: Float!
  availableCredit: Float
  clubName: String
  smallBlind: Float
  bigBlind: Float
}

type GameStackStat {
  handNum: Int
  before: Float
  after: Float
}

type CompletedGame {
  title: String
  gameType: GameType
  pageId: Int!
  gameCode: String!
  gameNum: Int
  smallBlind: Float
  chipUnit: ChipUnit
  bigBlind: Float
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  status: GameStatus
  runTime: Int
  runTimeStr: String
  sessionTime: Int
  sessionTimeStr: String
  handsDealt: Int
  handsPlayed: Int
  dataAggregated: Boolean
  buyIn: Float
  profit: Float
  stack: Float
  highHandTracked: Boolean
  stackStat: [GameStackStat!]
  isHost: Boolean
  isOwner: Boolean
  isManager: Boolean

  handDataLink: String

  # other stats
  preflopHands: Int
  flopHands: Int
  turnHands: Int
  riverHands: Int
  showdownHands: Int
}

type GameResultTableRow {
  playerId: Int!
  playerUuid: String!
  playerName: String!
  sessionTime: Int!
  sessionTimeStr: String!
  handsPlayed: Int!
  buyIn: Float!
  profit: Float!
  stack: Float!
  rakePaid: Float!
}

input GameConfigChangeInput {
  muckLosingHand: Boolean
  runItTwicePrompt: Boolean
}

input LocationInput {
  lat: Float!
  long: Float!
}

type SitBackResponse {
  missedBlind: Boolean
  status: PlayerGameStatus
}

type JoinResponse {
  missedBlind: Boolean
  status: PlayerGameStatus
}

type BuyInResponse {
  missedBlind: Boolean
  status: PlayerGameStatus
  approved: Boolean!
  expireSeconds: Int
}

type Mutation {
  # Not implemented
  configureGameFromTemplate(clubCode: String!, templateId: Int!): GameInfo!
  saveGameTemplate(
    clubCode: String!
    templateName: String!
    gameInput: GameCreateInput!
  ): Int!
  # implemented
  configureGame(clubCode: String!, game: GameCreateInput!): GameInfo!
  configureFriendsGame(game: GameCreateInput!): GameInfo!
  joinGame(gameCode: String!, seatNo: Int!, location: LocationInput): JoinResponse!
  takeSeat(gameCode: String!, seatNo: Int!, location: LocationInput): SeatInfo!
  buyIn(gameCode: String!, amount: Float!): BuyInResponse!
  reload(gameCode: String!, amount: Float!): BuyInStatus!
  approveRequest(
    gameCode: String!, 
    playerUuid: String!,
    type: ApprovalType!, 
    status: ApprovalStatus!
  ): Boolean!
  startGame(gameCode: String!): GameStatus!
  takeBreak(gameCode: String!): Boolean!
  sitBack(gameCode: String!, location: LocationInput): SitBackResponse
  leaveGame(gameCode: String!): Boolean!
  pauseGame(gameCode: String!): GameStatus!
  endGame(gameCode: String!): GameStatus!
  resumeGame(gameCode: String!): GameStatus!
  kickOut(gameCode: String!, playerUuid: String!): Boolean!
  setBuyInLimit(gameCode: String!, playerUuid: String, playerId: Int, limit: Float!): Boolean!
  addToWaitingList(gameCode: String!): Boolean!
  removeFromWaitingList(gameCode: String!, playerUuid: String): Boolean!
  applyWaitlistOrder(gameCode: String!, playerUuid: [String!]): Boolean!
  declineWaitlistSeat(gameCode: String!): Boolean
  switchSeat(gameCode: String!, seatNo: Int!): PlayerGameStatus!
  assignHost(gameCode: String!, playerUuid: String, playerId: Int): Boolean!
  
  # seat change APIs
  requestSeatChange(gameCode: String!, cancel: Boolean): DateTime!
  confirmSeatChange(gameCode: String!, seatNo: Int!): Boolean!
  declineSeatChange(gameCode: String!): Boolean!
  beginHostSeatChange(gameCode: String!): Boolean
  seatChangeSwapSeats(gameCode: String!, seatNo1: Int!, seatNo2: Int!): Boolean!
  seatChangeComplete(gameCode: String!, cancelChanges: Boolean): Boolean  

  # dealer choice game
  dealerChoice(gameCode: String!, gameType: GameType!): Boolean

  # post blind
  postBlind(gameCode: String!): Boolean

  # update game settings
  updateGameSettings(gameCode: String!, settings: GameSettingsUpdateInput!): Boolean

  # update settings for a player
  updateGamePlayerSettings(gameCode: String!, settings: GamePlayerSettingsUpdateInput): Boolean
}

type gameId{
  id: Int!
}

type PlayerData{
  buyIn: Int!
  handStack: String
  leftAt: DateTime
  noHandsPlayed: Int!
  noHandsWon: Int!
  noOfBuyins: Int!
  playerId: Int!
  playerName: String!
  playerUuid: String!
  sessionTime: Int!
}

type Query {
  # Not implemented
  getGameTemplates(clubCode: String!): [GameInfo!]
  # implemented
  gameById(gameCode: String!): gameId!
  gameInfo(gameCode: String!): GameInfo
  gameSettings(gameCode: String!): GameSettings!
  myGameSettings(gameCode: String!): GamePlayerSettings!
  myGameState(gameCode: String!): PlayerGameState
  tableGameState(gameCode: String!): [PlayerGameState!]
  waitingList(gameCode: String!): [WaitingListPlayer!]
  pendingApprovalsForClub(clubCode: String!): [PendingApproval!]
  pendingApprovalsForGame(gameCode: String!): [PendingApproval!]
  currentHandLog(gameCode: String!): Json
  gameResultTable(gameCode: String!): [GameResultTableRow!]
  gamePlayers(gameCode: String!): [PlayerInfo!]
  pendingApprovals: [PendingApproval!]
  downloadResult(gameCode: String!): String!
  playersInGameById(gameCode: String!): [PlayerData!]
  playersGameTrackerById(gameCode: String!): [PlayerData!]
  # player stats from live game
  playerStackStat(gameCode: String!): [GameStackStat!]

  # game history (club code is optional)
  gameHistory(clubCode: String): [CompletedGame!]
  completedGame(gameCode: String!): CompletedGame

  # open seats. Returns open seat numbers
  openSeats(gameCode: String!): [Int!]

  # seat change queries
  seatChangeRequests(gameCode: String!): [PlayerSeatChange]
  seatPositions(gameCode: String!, seatChange: Boolean): [SeatInfo!]

  # returns player role in a game
  playerRole(gameCode: String!): PlayerRole

  playersWithNotes(gameCode: String!): [PlayerNotes!]
}
