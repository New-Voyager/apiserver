scalar Json

enum GameType {
  UNKNOWN
  HOLDEM
  PLO
  PLO_HILO
  FIVE_CARD_PLO
  FIVE_CARD_PLO_HILO
  ROE
  DEALER_CHOICE
}


# Game status track the host actions on a game
# This information is updated by the host/manager
enum GameStatus {
  UNKNOWN
  CONFIGURED
  ACTIVE
  PAUSED
  ENDED
}

# Table status track the current status of the table
# This information is updated from the game server
enum TableStatus {
  UNKNOWN
  WAITING_TO_BE_STARTED
  NOT_ENOUGH_PLAYERS
  GAME_RUNNING
}

enum PlayerGameStatus {
  NOT_PLAYING
  PLAYING
  IN_QUEUE
  IN_BREAK
  STANDING_UP
  LEFT
  KICKED_OUT
  BLOCKED
  LOST_CONNECTION
  WAIT_FOR_BUYIN
  LEAVING_GAME
  TAKING_BREAK
  JOINING
  WAITLIST_SEATING
  PENDING_UPDATES
  WAIT_FOR_BUYIN_APPROVAL
}

enum BuyInApprovalStatus {
  WAITING_FOR_APPROVAL
  APPROVED
  DENIED    
}

enum NextHandUpdate {
  UNKNOWN,
  SWITCH_SEAT,
  TAKE_BREAK,
  RELOAD_CHIPS,
  BACK_FROM_BREAK,
  LEAVE
}

input GameCreateInput {
  gameType: GameType!
  title: String
  smallBlind: Float!
  bigBlind: Float!
  straddleBet: Float
  utgStraddleAllowed: Boolean
  buttonStraddleAllowed: Boolean
  minPlayers: Int! # 2
  maxPlayers: Int! # 2-9
  gameLength: Int! # in minutes
  buyInApproval: Boolean
  breakLength: Int # in minutes (default 15 mins)
  autoKickAfterBreak: Boolean
  waitlistSupported: Boolean
  sitInApproval: Boolean
  maxWaitList: Int
  rakePercentage: Float
  rakeCap: Float
  buyInMin: Float!
  buyInMax: Float!
  actionTime: Int! # default 20 secs
  muckLosingHand: Boolean
  waitForBigBlind: Boolean
  waitlistSittingTimeout: Int
  rewardIds: [Int]
  pauseAfterShowdown: Int   # default 2 seconds
  buyInWaitTime: Int        # default 3 minutes
  seatChangeAllowed: Boolean
  botGame: Boolean
  runItTwiceAllowed: Boolean
  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]
  audioConfEnabled: Boolean
}

type SeatInfo {
  seatNo: Int!
  playerUuid: String!
  playerId: Int
  name: String!
  buyIn: Float
  stack: Float
  status: PlayerGameStatus
  openSeat: Boolean
  buyInExpTime: DateTime
  breakExpTime: DateTime
  gameToken: String
  isBot: Boolean
}

type TableSeats {
  playersInSeats: [SeatInfo!]
  availableSeats: [Int!]
}

type GameInfo {
  gameID: Int
  gameCode: String!
  clubCode: String
  gameType: GameType
  title: String
  smallBlind: Float
  bigBlind: Float
  straddleBet: Float
  utgStraddleAllowed: Boolean
  buttonStraddleAllowed: Boolean
  minPlayers: Int
  maxPlayers: Int
  gameLength: Int
  buyInApproval: Boolean
  breakLength: Int
  autoKickAfterBreak: Boolean
  waitlistSupported: Boolean
  sitInApproval: Boolean
  maxWaitList: Int
  rakePercentage: Float
  rakeCap: Float
  buyInMin: Float
  buyInMax: Float
  actionTime: Int
  muckLosingHand: Boolean         # default game setting
  waitForBigBlind: Boolean
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  template: Boolean
  status: GameStatus
  tableStatus: TableStatus
  seatInfo: TableSeats
  gameToken: String
  waitlistSittingTimeout: Int
  hhEligible: Boolean           # true if this game is eligible for high hand
  botGame: Boolean
  runItTwiceAllowed: Boolean
  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]

  # NATS channels
  gameToPlayerChannel: String
  handToAllChannel: String
  playerToHandChannel: String
  handToPlayerChannel: String
  gameChatChannel: String

  # current player status
  playerGameStatus: PlayerGameStatus
  playerRunItTwiceConfig: Boolean
  playerMuckLosingHandConfig: Boolean 

  # updates
  handNum: Int
  rakeCollected: Float

  # player role
  isHost: Boolean
  isOwner: Boolean
  isManager: Boolean

  # audio conference options
  audioConfEnabled: Boolean
  janusUrl: String
  janusToken: String
  janusSecret: String
  janusRoomId: Int
  janusRoomPin: String
}

type PlayerRole {
    # player role
  isHost: Boolean
  isOwner: Boolean
  isManager: Boolean
}

input GameUpdateInput {
  status: GameStatus
  muckLosingHand: Boolean
  waitForBigBlind: Boolean
  buyInMin: Float
  buyInMax: Float
  title: String
  roeGames: [GameType!]
  dealerChoiceGames: [GameType!]
}


type PlayerGameState {
  playerUuid: String
  buyIn: Float
  stack: Float
  status: PlayerGameStatus
  buyInStatus: BuyInApprovalStatus
  playingFrom: DateTime
  waitlistNo: Int
  seatNo: Int
}

type PlayerSeatChange {
  playerUuid: String!
  name: String
  status: PlayerGameStatus
  seatNo: Int
  sessionTime: Int
  seatChangeRequestedAt: DateTime
}

type WaitingListPlayer {
  playerUuid: String
  name: String
  waitingFrom: DateTime
  status: PlayerGameStatus
  waitlistNum: Int
}

type BuyInStatus {
  expireSeconds: Int
  approved: Boolean!
}

enum ApprovalType {
  BUYIN_REQUEST
  RELOAD_REQUEST
}

enum ApprovalStatus {
  APPROVED
  DENIED
}

type PendingApproval {
  gameCode: String!
  gameType: GameType
  clubCode: String
  playerUuid: String!
  name: String!
  approvalType: ApprovalType!
  amount: Float!
  outstandingBalance: Float
  clubName: String
  smallBlind: Float
  bigBlind: Float
}


type GameStackStat {
  handNum: Int
  before: Float
  after: Float
}

type CompletedGame {
  title: String
  gameType: GameType
  pageId: Int!
  gameCode: String!
  gameNum: Int
  smallBlind: Float
  bigBlind: Float
  startedBy: String
  startedAt: DateTime
  endedBy: String
  endedAt: DateTime
  status: GameStatus
  runTime: Int
  runTimeStr: String
  sessionTime: Int
  sessionTimeStr: String
  handsDealt: Int
  handsPlayed: Int
  handsWon: Int
  balance: Int 
  bigWin: Float
  bigWinHand: Int 
  bigLoss: Float
  bigLossHand: Float
  preflopHands: Int
  flopHands: Int
  turnHands: Int
  riverHands: Int
  showdownHands: Int
  buyIn: Float
  profit: Float
  stackStat: [GameStackStat!]
}

type GameResultTableRow {
  playerName: String!
  sessionTime: Int!
  sessionTimeStr: String!
  handsPlayed: Int!
  buyIn: Float!
  profit: Float!
  rakePaid: Float!
}

input GameConfigChangeInput {
  muckLosingHand: Boolean
  runItTwicePrompt: Boolean
}

type Mutation {
  # Not implemented
  configureGameFromTemplate(clubCode: String!, templateId: Int!): GameInfo!
  updateGame(
    clubCode: String!
    gameCode: String!
    update: GameUpdateInput
  ): GameInfo!
  saveGameTemplate(
    clubCode: String!
    templateName: String!
    gameInput: GameCreateInput!
  ): Int!
  # implemented
  configureGame(clubCode: String!, game: GameCreateInput!): GameInfo!
  configureFriendsGame(game: GameCreateInput!): GameInfo!
  joinGame(gameCode: String!, seatNo: Int!): PlayerGameStatus!
  buyIn(gameCode: String!, amount: Float!): BuyInStatus!
  reload(gameCode: String!, amount: Float!): BuyInStatus!
  approveRequest(
    gameCode: String!, 
    playerUuid: String!,
    type: ApprovalType!, 
    status: ApprovalStatus!
  ): Boolean!
  startGame(gameCode: String!): GameStatus!
  takeBreak(gameCode: String!): Boolean!
  sitBack(gameCode: String!): Boolean!
  leaveGame(gameCode: String!): Boolean!
  pauseGame(gameCode: String!): GameStatus!
  endGame(gameCode: String!): GameStatus!
  resumeGame(gameCode: String!): GameStatus!
  kickOut(gameCode: String!, playerUuid: String!): Boolean!
  addToWaitingList(gameCode: String!): Boolean!
  removeFromWaitingList(gameCode: String!, playerUuid: String): Boolean!
  applyWaitlistOrder(gameCode: String!, playerUuid: [String!]): Boolean!
  declineWaitlistSeat(gameCode: String!): Boolean
  switchSeat(gameCode: String!, seatNo: Int!): PlayerGameStatus!

  # player changes in live game
  updateGameConfig(gameCode: String!, config: GameConfigChangeInput!): Boolean

  # seat change APIs
  requestSeatChange(gameCode: String!): DateTime!
  confirmSeatChange(gameCode: String!, seatNo: Int): Boolean!
  beginHostSeatChange(gameCode: String!): Boolean
  seatChangeSwapSeats(gameCode: String!, seatNo1: Int!, seatNo2: Int!): Boolean!
  seatChangeComplete(gameCode: String!, cancelChanges: Boolean): Boolean  

  # dealer choice game
  dealerChoice(gameCode: String!, gameType: GameType!): Boolean
}

type gameId{
  id: Int!
}


type Query {
  # Not implemented
  getGameTemplates(clubCode: String!): [GameInfo!]
  # implemented
  gameById(gameCode: String!): gameId!
  gameInfo(gameCode: String!): GameInfo
  myGameState(gameCode: String!): PlayerGameState
  tableGameState(gameCode: String!): [PlayerGameState!]
  waitingList(gameCode: String!): [WaitingListPlayer!]
  pendingApprovalsForClub(clubCode: String!): [PendingApproval!]
  pendingApprovalsForGame(gameCode: String!): [PendingApproval!]
  completedGame(gameCode: String!): CompletedGame
  currentHandLog(gameCode: String!): Json
  gameResultTable(gameCode: String!): [GameResultTableRow!]
  gamePlayers(gameCode: String!): [PlayerInfo!]
  pendingApprovals(clubCode: String gameCode: String): [PendingApproval!]

  # seat change queries
  seatChangeRequests(gameCode: String!): [PlayerSeatChange]
  seatPositions(gameCode: String!, seatChange: Boolean): [SeatInfo!]

  # returns player role in a game
  playerRole(gameCode: String!): PlayerRole
}
