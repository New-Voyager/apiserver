input TournamentCreateInput {
  name: String!
  startTime: DateTime!
  startingChips: Float!
  minPlayers: Int
  maxPlayers: Int
  maxPlayersInTable: Int!
  levelType: TournamentLevelType
  fillWithBots: Boolean
  levelTime: Int
  botsCount: Int
  scheduledAt: DateTime
}

type TournamentListItem {
  tournamentId: Int!
  name: String!
  startTime: DateTime
  startingChips: Float
  minPlayers: Int
  maxPlayers: Int
  maxPlayersInTable: Int
  levelType: TournamentLevelType
  fillWithBots: Boolean
  status: TournamentStatus
  registeredPlayersCount: Int
  botsCount: Int
  activePlayersCount: Int
  createdBy: String
  scheduledAt: DateTime
}

enum TournamentPlayingStatus {
  REGISTERED, 
  JOINED, 
  PLAYING,
  BUSTED_OUT,
  SITTING_OUT,
}

enum TournamentStatus {
  UNKNOWN,
  SCHEDULED,
  ABOUT_TO_START,
  RUNNING,
  ENDED,
  CANCELLED,
}

enum TournamentLevelType {
  STANDARD,
  TURBO,
  SUPER_TURBO,
}

type TournamentPlayer {
  playerId: Int!
  playerUuid: String!
  playerName: String!
  stack: Float!
  status: TournamentPlayingStatus
  tableNo: Int
  seatNo: Int
}

type TournamentTable {
  no: Int!
  players: [TournamentPlayer!]
}

type TournamentInfo {
  id: Int!
  name: String!
  startTime: DateTime!
  startingChips: Float!
  minPlayers: Int
  maxPlayers: Int
  maxPlayersInTable: Int!
  players: [TournamentPlayer!]
  registeredPlayers: [TournamentPlayer!]
  tables: [TournamentTable!]
  tournamentChannel: String!
  privateChannel: String!
  status: TournamentStatus!
  myTableNo: Int
  scheduledAt: DateTime
  startedAt: DateTime
}

type TournamentGameInfo {
  tournamentId: Int!
  tableNo: Int!
  gameID: Int!
  gameCode: String!
  gameType: GameType
  smallBlind: Float
  bigBlind: Float
  ante: Float

  actionTime: Int
  maxPlayersInTable: Int
  title: String
  chipUnit: ChipUnit
  status: GameStatus
  tableStatus: TableStatus
  
  players: [TournamentPlayer!]

  level: Int!
  nextLevel: Int
  nextLevelTimeInSecs: Int    # next level time in seconds
  nextSB: Float
  nextBB: Float
  nextAnte: Float

  playing: Boolean    # if true, the player is playing

  # NATS channels
  gameToPlayerChannel: String
  handToAllChannel: String
  playerToHandChannel: String
  handToPlayerChannel: String
  handToPlayerTextChannel: String
  gameChatChannel: String
  clientAliveChannel: String
  tournamentChannel: String

  # livekit information
  livekitUrl: String
  livekitToken: String
}


type Query {
  getTournamentInfo(tournamentId: Int!): TournamentInfo!
  getTournamentTableInfo(tournamentId: Int!, tableNo: Int!): TournamentGameInfo!
  getTournamentGameInfo(gameCode: String!): TournamentGameInfo!
  getActiveTournaments(clubCode: String): [TournamentListItem!]
}

type Mutation {
  scheduleTournament(input: TournamentCreateInput!): Int!
  registerTournament(playerUuid: String, tournamentId: Int!): Boolean!
  unregisterTournament(tournamentId: Int!): Boolean!
  startTournament(tournamentId: Int!): Boolean!
  joinTournament(tournamentId: Int!): TournamentGameInfo!
  kickoffTournament(tournamentId: Int!): Boolean!
  cancelTournament(tournamentId: Int!): Boolean!
  triggerAboutToStartTournament(tournamentId: Int!): Boolean
  fillBotsTournament(tournamentId: Int!): Boolean
}
