input TournamentCreateInput {
  name: String!
  startTime: DateTime!
  startingChips: Float!
  minPlayers: Int
  maxPlayers: Int
  maxPlayersInTable: Int!
}

enum TournamentPlayingStatus{
  REGISTERED, 
  JOINED, 
  PLAYING,
  BUSTED_OUT,
}

type TournamentPlayer {
  playerId: Int!
  playerUuid: String!
  playerName: String!
  stack: Float!
  status: TournamentPlayingStatus
  tableNo: Int
}

type TournamentTable {
  no: Int!
  players: [TournamentPlayer!]
}

type TournamentInfo {
  id: ID!
  name: String!
  startTime: DateTime!
  startingChips: Float!
  minPlayers: Int
  maxPlayers: Int
  maxPlayersInTable: Int!
  players: [TournamentPlayer!]
  tables: [TournamentTable!]
}

type Query {
  getTournamentInfo(tournamentId: Int!): TournamentInfo!
}

type Mutation {
  scheduleTournament(input: TournamentCreateInput!): Int!
  registerTournament(playerUuid: String, tournamentId: Int!): Boolean!
  unregisterTournament(tournamentId: Int!): Boolean!
  startTournament(tournamentId: Int!): Boolean!
  joinTournament(tournamentId: Int!): Boolean!
  cancelTournament(tournamentId: Int!): Boolean!
  seatBotsInTournament(tournamentId: Int!): Boolean!
}
