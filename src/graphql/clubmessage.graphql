enum ClubMessageType {
  TEXT,
  HAND,
  GIPHY,
}

enum HostMessageType {
  FROM_HOST,
  TO_HOST,
}

input ClubMessageInput {
  messageType: ClubMessageType!
  text: String
  gameNum: Int
  handNum: Int
  giphyLink: String
  playerTags: String
}

type ClubMessage {
  id: Int!               
  messageType: ClubMessageType!
  clubCode: String!
  text: String
  gameNum: Int
  handNum: Int
  giphyLink: String
  playerTags: String
  messageTime: DateTime
  messageTimeInEpoc: Int
}

type HostMessage {
  id: Int!
  clubCode: String!
  memberID: Int!
  messageTime: DateTime
  messageType: HostMessageType!
  text: String!
}

type HostMessageSummary {
  memberID: Int!
  memberName: String!
  memberImageId: String
  newMessageCount: Int!
  lastMessageTime: DateTime
  lastMessageText: String
  messageType: HostMessageType!
}

type Mutation {
  sendClubMessage(clubCode: String!, message: ClubMessageInput!): String!

  sendMessageToMember(clubCode: String!, memberID: Int!, text: String!): HostMessage!
  sendMessageToHost(clubCode: String!, text: String!): HostMessage!
}

type Query {
  clubMessages(clubCode: String!, pageOptions: PageInput): [ClubMessage]  

  hostMessageSummary(clubCode: String!): [HostMessageSummary!]
  
  # first and afterId are for pagination.
  hostMessages(clubCode: String!, memberID: Int!, first: Int, afterId: Int): [HostMessage!]
}
