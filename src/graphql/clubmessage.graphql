enum ClubMessageType {
  TEXT,
  HAND,
  GIPHY,
}

enum HostMessageType {
  FROM_HOST,
  TO_HOST,
}

input ClubMessageInput {
  messageType: ClubMessageType!
  text: String
  gameNum: Int
  handNum: Int
  giphyLink: String
  playerTags: String
}

type ClubMessage {
  id: Int!               
  messageType: ClubMessageType!
  clubCode: String!
  text: String
  gameNum: Int
  handNum: Int
  giphyLink: String
  sender: String          # uuid of the sender
  playerTags: String
  messageTime: DateTime
  messageTimeInEpoc: Int
}

type HostMessage {
  id: Int!
  clubCode: String!
  memberId: Int!
  playerId: String!
  memberName: String!
  messageTime: DateTime
  messageType: HostMessageType!
  text: String!
}

type HostMessageSummary {
  memberId: Int!
  playerId: String!
  memberName: String!
  memberImageId: String
  newMessageCount: Int!
  lastMessageTime: DateTime
  lastMessageText: String
  messageType: HostMessageType!
}

type Mutation {
  sendClubMessage(clubCode: String!, message: ClubMessageInput!): String!

  sendMessageToMember(clubCode: String!, playerId: String!, text: String!): HostMessage!
  sendMessageToHost(clubCode: String!, text: String!): HostMessage!
  markHostMsgRead(clubCode: String!): Boolean!
  markMemberMsgRead(clubCode: String!, playerId: String!): Boolean!
}

type Query {
  clubMessages(clubCode: String!, pageOptions: PageInput): [ClubMessage]  

  hostMessageSummary(clubCode: String!): [HostMessageSummary]
  
  # first and afterId are for pagination.
  messagesFromHost(clubCode: String!, first: Int, afterId: Int): [HostMessage]
  messagesFromMember(clubCode: String, playerId: String!, first: Int, afterId: Int): [HostMessage]
}
