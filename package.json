{
  "name": "apiserver",
  "version": "1.0.0",
  "main": "build/index.js",
  "repository": "https://github.com/somavoyager/apiserver.git",
  "author": "Voyager LLC",
  "private": true,
  "scripts": {
    "watch-debug": "npm run copy-files && LOG_LEVEL=INFO DEBUG_WITH_STACK=1 NOTIFY_GAME_SERVER=1 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} BOTRUNNER_URL=http://botrunner:8081 TIMER_URL=http://timer:8082 NATS_URL=${NATS_URL:-'nats://nats:4222'} EXTERNAL_NATS_URL=${EXTERNAL_NATS_URL:-'nats://localhost:4222'} NATS_ENABLED=1 POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} NODE_ENV=dev tsc-watch --noClear --onSuccess 'node --inspect=0.0.0.0:9235 --nolazy ./build/index.js' --onFailure 'echo Beep! Compilation Failed'",
    "watch-localhost-debug": "NODE_ENV=dev npm run copy-files && LOG_LEVEL=INFO DEBUG_WITH_STACK=1 NOTIFY_GAME_SERVER=1 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} COMPRESS_HAND_DATA=false BOTRUNNER_URL=http://localhost:8081 TIMER_URL=http://localhost:8082 NATS_URL=${NATS_URL:-'nats://localhost:4222'} NATS_ENABLED=1 POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} EXTERNAL_NATS_URL=${EXTERNAL_NATS_URL:-'nats://192.168.1.100:4222'} NODE_ENV=dev tsc-watch --noClear --onSuccess 'node --inspect=0.0.0.0:9235 --nolazy ./build/index.js' --onFailure 'echo Beep! Compilation Failed'",
    "watch-localhost-prod-debug": "NODE_ENV=prod npm run copy-files && LOG_LEVEL=INFO DEBUG_WITH_STACK=1 NOTIFY_GAME_SERVER=1 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} COMPRESS_HAND_DATA=false BOTRUNNER_URL=http://localhost:8081 TIMER_URL=http://localhost:8082 NATS_URL=${NATS_URL:-'nats://localhost:4222'} NATS_ENABLED=1 POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} NODE_ENV=prod tsc-watch --noClear --onSuccess 'node --inspect=0.0.0.0:9235 --nolazy ./build/index.js' --onFailure 'echo Beep! Compilation Failed'",
    "run-local": "NODE_ENV=dev NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://localhost:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} node -r ts-node/register -r source-map-support/register ./build/index.js",
    "run-docker": "NOTIFY_GAME_SERVER=1 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://nats:4222'} NATS_ENABLED=1 POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} NODE_ENV=${NODE_ENV:-dev} node --inspect=0.0.0.0:9235 --nolazy ./build/index.js",
    "debug": "npm run copy-files && NODE_ENV=dev EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} node --inspect=0.0.0.0:9228 ./build/index.js",
    "debug-windows": "set NODE_ENV=dev && tsc-watch.bat",
    "debug-break": "node --nolazy --inspect-brk=9235 ./build/index.js",
    "test": "NODE_ENV=test jest --runInBand ./tests",
    "int-test": "NODE_ENV=int-test NOTIFY_SCHEDULER=0 NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://localhost:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} TS_NODE_PROJECT='./tsconfig.json' jest --coverage --verbose=true --silent=false --config jest-int.config.js --runInBand ./tests/entrypoint.test.ts --forceExit --detectOpenHandles",
    "test1": "NODE_ENV=test EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} jest --runInBand ./tests \"--testNamePattern\" \"wait list seating\"",
    "unit-tests": "UNIT_TEST=1 NODE_ENV=test DB_USED=sqllite EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} npx jest --forceExit --runInBand ./unit-tests",
    "unit-test-specific": "NODE_ENV=unit-test DB_USED=sqllite EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} jest --forceExit --runInBand ./unit-tests/club.test.ts",
    "test-specific": "NODE_ENV=test EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} jest --runInBand ./tests \"--testNamePattern\" \"buyIn for a club game\"",
    "test-server-watch": "NODE_ENV=test NATS_URL=${NATS_URL:-'nats://localhost:4222'} DB_USED=sqllite EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} tsc-watch --noClear --onSuccess 'node --inspect=0.0.0.0:9235 --nolazy ./build/index.js' --onFailure 'echo Beep! Compilation Failed'",
    "test-server": "NODE_ENV=test NATS_URL=${NATS_URL:-'nats://localhost:4222'} DB_USED=sqllite EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} node build/index.js",
    "int-server": "npm run copy-files && NODE_ENV=dev NOTIFY_SCHEDULER=0 NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://nats:4222'} POSTGRES_HOST=${POSTGRES_HOST:-postgres} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} node ./build/index.js",
    "int-test2": "NODE_ENV=int-test NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://localhost:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game}  jest --config jest-int.config.js --runInBand ./tests",
    "int-test-specific": "NODE_ENV=int-test NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://localhost:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game}  jest --runInBand ./tests/club/clubGames.test.ts --config jest-int.config.js  --forceExit --detectOpenHandles",
    "run-server": "NODE_ENV=dev node build/index.js",
    "test-server-windows": "test-server.bat",
    "test-windows": "set NODE_ENV=test && jest --runInBand ./tests",
    "script-tests-old": "node --nolazy -r ts-node/register/transpile-only script-tests/testdriver.ts",
    "check": "gts check",
    "clean": "gts clean",
    "compile": "tsc && npm run copy-files",
    "fix": "gts fix",
    "pretest-disabled": "npm run compile",
    "posttest-disabled": "npm run check",
    "run-pg": "docker-compose -f docker-compose-pg.yaml up",
    "run-redis": "docker-compose -f docker-compose-redis.yaml up -d",
    "stop-redis": "docker-compose -f docker-compose-redis.yaml down",
    "script-tests": "node build/script-tests/testdriver.js ./script-tests/script",
    "copy-files": "npm run copy-google-svc && npm run copy-geodb && npm run copy-proto",
    "copy-google-svc": "mkdir -p build/src/google-services/ && cp src/google-services/* build/src/google-services/",
    "copy-geodb": "mkdir -p build/geodb && cp geodb/GeoLite2-City.mmdb build/geodb/",
    "copy-proto": "mkdir -p build/src/proto/ && cp src/repositories/*.proto build/src/repositories",
    "codecov": "NODE_ENV=dev NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://192.168.40.34:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} nyc --reporter=html --reporter=text node -r ts-node/register -r source-map-support/register ./build/index.js",
    "codecov-spec": "NODE_ENV=dev NOTIFY_GAME_SERVER=0 EXTERNAL_ENDPOINTS=${EXTERNAL_ENDPOINTS:-1} INTERNAL_ENDPOINTS=${INTERNAL_ENDPOINTS:-1} NATS_URL=${NATS_URL:-'nats://192.168.0.107:4222'} POSTGRES_HOST=${POSTGRES_HOST:-localhost} POSTGRES_PORT=${POSTGRES_PORT:-5432} POSTGRES_USER=${POSTGRES_USER:-game} POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-game} jest --coverage --runInBand"
  },
  "dependencies": {
    "@googleapis/docs": "^0.2.0",
    "@grpc/grpc-js": "^1.6.7",
    "@grpc/proto-loader": "^0.6.12",
    "@maxmind/geoip2-node": "^3.4.0",
    "@types/jest": "^26.0.0",
    "@types/js-yaml": "^3.12.5",
    "@types/jsonwebtoken": "^8.5.0",
    "@types/lodash": "^4.14.155",
    "agora-access-token": "^2.0.4",
    "apollo-boost": "^0.4.9",
    "apollo-graphql": "^0.9.3",
    "apollo-server-express": "^3.3.0",
    "aws-sdk": "^2.1003.0",
    "axios": "^0.21.2",
    "body-parser": "^1.19.0",
    "cls-hooked": "^4.2.2",
    "colorize": "^0.1.0",
    "cors": "^2.8.5",
    "dotenv": "^8.2.0",
    "express": "^4.17.1",
    "express-fileupload": "^1.2.1",
    "firebase-admin": "^9.6.0",
    "fs": "^0.0.1-security",
    "fs-extra": "^10.0.0",
    "glob": "^7.1.6",
    "google-play-billing-validator": "^2.1.3",
    "google-protobuf": "^3.20.1",
    "googleapis": "^80.1.0",
    "graphql": "^15.5.3",
    "gts": "^3.1.0",
    "humanize-duration": "^3.25.0",
    "js-yaml": "^3.14.0",
    "jsonwebtoken": "^8.5.1",
    "livekit-server-sdk": "^0.5.9",
    "lodash": "^4.17.19",
    "lzutf8": "^0.6.0",
    "merge-graphql-schemas": "^1.7.8",
    "module-alias": "^2.2.2",
    "moment-timezone": "^0.5.34",
    "nats": "^2.1.0",
    "node-apple-receipt-verify": "^1.9.3",
    "nodemailer": "^6.6.3",
    "nodemailer-smtp-transport": "^2.7.4",
    "pg": "^8.2.1",
    "prom-client": "^14.0.0",
    "redis": "^3.1.2",
    "reflect-metadata": "^0.1.13",
    "source-map-support": "^0.5.19",
    "tsc-watch": "^4.2.8",
    "typeorm": "^0.2.25",
    "uuid": "^8.1.0",
    "winston": "^3.2.1",
    "yaml": "^1.10.2",
    "zipkin": "^0.22.0"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.1",
    "@types/node": "^16.11.6",
    "copyfiles": "^2.3.0",
    "gts": "^3.1.0",
    "istanbul": "^0.4.5",
    "istanbul-api": "^3.0.0",
    "istanbul-lib-coverage": "^3.0.1",
    "jest": "^26.0.1",
    "node-fetch": "^2.6.0",
    "nyc": "^15.1.0",
    "sqlite3": "^x",
    "supertest": "^4.0.2",
    "ts-jest": "^26.1.0",
    "ts-node": "^10.4.0",
    "tsconfig-paths": "^3.11.0",
    "typescript": "^4.4.4"
  },
  "_moduleAliases": {
    "@src": "./build/src/",
    "@test": "./build/test/",
    "@": "./"
  },
  "nyc": {
    "_comment": "Purpose of this part: to do code coverage within Mocha/Chai using Istanbul",
    "extends": "@istanbuljs/nyc-config-typescript",
    "exclude": [
      "**/node_modules/**",
      "**/test/**",
      "**/coverage/**",
      "**/apiserver/unit-tests/**",
      "**/apiserver/tests/**"
    ],
    "all": true,
    "include": [
      "src/**/*.ts",
      "src/**/*.tsx"
    ],
    "extension": [
      ".ts",
      ".tsx"
    ],
    "require": [
      "ts-node/register"
    ],
    "reporter": [
      "text-summary",
      "html"
    ],
    "sourceMap": true,
    "instrument": true
  }
}